#!/usr/bin/env python2.7
# vim: ft=python


host     = 'localhost'
port     = 6600
password = None


from sys import exit, argv
from signal import signal, SIGINT
# http://pythonhosted.org/python-mpd2/topics/commands.html
from mpd import MPDClient


class MPStats():
    client          = None
    stats_file_path = '/rtmp/cassette'

    def __init__(self, host, port, password):
        # print 'Connecting'
        try:
            self.client = MPDClient()

            self.client.timeout     = 1
            self.client.idletimeout = None

            self.client.connect(host, port)
            self.client.password(password)

            signal(SIGINT, self.quit)

            # print 'Connected'

        except Exception, e:
            print 'Could not connect?'
            exit(2)


    def __exit__(self):
        self.client.noidle()

        self.client.close()
        self.client.disconnect()


    def quit(self, signal=None, frame=None):
        self.__exit__()

        # print 'Quitting'
        exit(0)


    def get_info(self):
        status       = self.client.status()
        playlistinfo = self.client.playlistinfo()

        current_time = 0
        if 'elapsed' in status:
            current_time = float(status['elapsed'])

        overall_time = 0

        for song in playlistinfo:
            if 'songid' in status and status['songid'] == song['id']:
                current_time += overall_time

            overall_time += float(song['time'])

        return current_time, overall_time, status['state']


    def auto_update_file(self):
        if not self.client:
            return

        self.write_to_file()

        # TODO also update systematically, like every minute
        # what when okresowe update and client.idle produces update at the same time?
        # update queue?

        while True:
            self.client.idle('player')
            print 'update'
            s = self.client.status()

            # if s['state'] in ['play', 'pause']:
            self.write_to_file()


    def write_to_output(self):
        current_time, overall_time, status = stats.get_info()
        print current_time, overall_time, status

    def write_to_file(self):
        current_time, overall_time, status = stats.get_info()

        with open(self.stats_file_path, 'w') as stats_file:
            line = '{} {} {}\n'.format(current_time, overall_time, status)
            stats_file.write(line)




stats = MPStats(host, port, password)

if len(argv) > 1 and argv[1] == 'once':
    # stats.write_to_file()
    stats.write_to_output()
else:
    stats.auto_update_file()
